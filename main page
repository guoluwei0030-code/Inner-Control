<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pod 02 声光电控制系统</title>
    <!-- 引入Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- 引入Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    
    <!-- 配置Tailwind自定义颜色和字体 -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#165DFF',
                        secondary: '#36CFC9',
                        accent: '#722ED1',
                        dark: '#1D2129',
                        light: '#F2F3F5',
                        success: '#52C41A',
                        warning: '#FAAD14',
                        danger: '#FF4D4F',
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    
    <!-- 自定义工具类 -->
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .control-panel {
                @apply bg-dark/80 backdrop-blur-md rounded-xl p-4 shadow-lg transition-all duration-300;
            }
            .control-button {
                @apply flex items-center justify-center rounded-lg p-3 transition-all duration-200 hover:bg-white/10 active:bg-white/20;
            }
            .scene-button-active {
                @apply bg-primary/20 text-primary;
            }
        }
    </style>
    
    <style>
        /* 滑块样式 */
        input[type="range"] {
            -webkit-appearance: none;
            height: 6px;
            border-radius: 3px;
            background: #333842;
            outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #165DFF;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.1);
            box-shadow: 0 0 10px rgba(22, 93, 255, 0.5);
        }
        
        /* 渐变背景 */
        .bg-gradient-custom {
            background: linear-gradient(180deg, #1D2129 0%, #272E3B 100%);
        }
        
        /* 平滑滚动 */
        html {
            scroll-behavior: smooth;
        }
        
        /* 状态指示灯动画 */
        .status-indicator {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {
                opacity: 1;
            }
            50% {
                opacity: 0.6;
            }
            100% {
                opacity: 1;
            }
        }
        
        /* 场景按钮点击动画 */
        .scene-button {
            transition: all 0.3s ease;
        }
        
        .scene-button:active {
            transform: scale(0.95);
        }
        
        /* 颜色选择器样式 */
        .color-option {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        
        .color-option:hover {
            transform: scale(1.1);
        }
        
        .color-option.selected {
            box-shadow: 0 0 0 2px white, 0 0 0 4px #165DFF;
        }
        
        /* 渐变色带样式 */
        .color-gradient {
            height: 8px;
            width: 100%;
            border-radius: 4px;
            background: linear-gradient(to right, 
                #FF4D4F, #FAAD14, #52C41A, 
                #165DFF, #722ED1, #F5222D);
            margin: 8px 0;
            position: relative;
        }
        
        .color-picker-indicator {
            position: absolute;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 2px solid white;
            top: 50%;
            transform: translate(-50%, -50%);
            box-shadow: 0 0 0 1px rgba(0,0,0,0.2);
            cursor: pointer;
            transition: left 0.2s ease;
        }
    </style>
</head>
<body class="bg-gradient-custom text-light min-h-screen flex items-center justify-center p-4">
    <!-- 主控制条 -->
    <div class="w-64 max-w-full h-[80vh] max-h-[650px] control-panel flex flex-col">
        <!-- 顶部房间信息 -->
        <div class="text-center mb-6">
            <h1 class="text-xl font-bold mb-1">Pod 02</h1>
            <p class="text-sm text-gray-400">声光电控制系统</p>
        </div>
        
        <!-- 场景模式 -->
        <div class="mb-6">
            <h2 class="text-sm font-medium text-gray-400 mb-3 flex items-center">
                <i class="fa fa-film mr-2"></i>场景模式
            </h2>
            <div class="grid grid-cols-2 gap-2">
                <button class="scene-button control-button scene-button-active" data-scene="meeting">
                    <i class="fa fa-users mr-2"></i>会议
                </button>
                <button class="scene-button control-button" data-scene="reading">
                    <i class="fa fa-book mr-2"></i>阅读
                </button>
                <button class="scene-button control-button" data-scene="rest">
                    <i class="fa fa-moon-o mr-2"></i>休息
                </button>
                <button class="scene-button control-button" data-scene="entertainment">
                    <i class="fa fa-gamepad mr-2"></i>娱乐
                </button>
            </div>
        </div>
        
        <!-- 灯光控制 -->
        <div class="mb-6">
            <div class="flex justify-between items-center mb-3">
                <h2 class="text-sm font-medium text-gray-400 flex items-center">
                    <i class="fa fa-lightbulb-o mr-2"></i>灯光控制
                </h2>
                <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" checked class="sr-only peer" id="light-toggle">
                    <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"></div>
                </label>
            </div>
            
            <!-- 主灯亮度调节 -->
            <div class="mb-4">
                <div class="flex justify-between text-xs mb-1">
                    <span>主灯亮度</span>
                    <span id="brightness-value">75%</span>
                </div>
                <input type="range" min="0" max="100" value="75" class="w-full" id="brightness-slider">
            </div>
            
            <!-- 色温调节 -->
            <div class="mb-4">
                <div class="flex justify-between text-xs mb-1">
                    <span>色温</span>
                    <span id="temperature-value">4000K</span>
                </div>
                <input type="range" min="2700" max="6500" value="4000" step="100" class="w-full" id="temperature-slider">
            </div>
            
            <!-- 空调控制 -->
            <div class="mb-4 pt-4 border-t border-gray-700">
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-sm font-medium text-gray-400 flex items-center">
                        <i class="fa fa-snowflake-o mr-2"></i>空调控制
                    </h3>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" checked class="sr-only peer" id="ac-toggle">
                        <div class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary"></div>
                    </label>
                </div>
                
                <!-- 温度调节 -->
                <div class="mb-3">
                    <div class="flex justify-between text-xs mb-1">
                        <span>温度</span>
                        <span id="temp-value">24°C</span>
                    </div>
                    <input type="range" min="16" max="30" value="24" class="w-full" id="temp-slider">
                </div>
                
                <!-- 风力调节 -->
                <div>
                    <div class="flex justify-between text-xs mb-1">
                        <span>风力</span>
                        <span id="fan-speed-value">2级</span>
                    </div>
                    <input type="range" min="1" max="4" value="2" class="w-full" id="fan-speed-slider">
                </div>
            </div>
            
            <!-- 氛围灯控制 -->
            <div>
                <div class="flex justify-between items-center mb-2">
                    <span class="text-xs">氛围灯</span>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" checked class="sr-only peer" id="ambient-toggle">
                        <div class="w-9 h-5 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-accent"></div>
                    </label>
                </div>
                
                <!-- 氛围灯亮度 -->
                <div class="mb-3">
                    <div class="flex justify-between text-xs mb-1">
                        <span>氛围灯亮度</span>
                        <span id="ambient-brightness-value">60%</span>
                    </div>
                    <input type="range" min="0" max="100" value="60" class="w-full" id="ambient-brightness-slider">
                </div>
                
                <!-- 氛围灯颜色选择 -->
                <div>
                    <div class="text-xs mb-2">氛围灯颜色</div>
                    <div class="flex justify-between mb-3">
                        <div class="color-option selected" style="background-color: #FF4D4F;" data-color="red" data-position="0%"></div>
                        <div class="color-option" style="background-color: #FAAD14;" data-color="yellow" data-position="20%"></div>
                        <div class="color-option" style="background-color: #52C41A;" data-color="green" data-position="40%"></div>
                        <div class="color-option" style="background-color: #165DFF;" data-color="blue" data-position="60%"></div>
                        <div class="color-option" style="background-color: #722ED1;" data-color="purple" data-position="80%"></div>
                        <div class="color-option" style="background-color: #F5222D;" data-color="pink" data-position="100%"></div>
                    </div>
                    
                    <!-- 渐变色带 -->
                    <div class="color-gradient">
                        <div class="color-picker-indicator" style="left: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 音量控制 -->
        <div class="mb-6">
            <div class="flex justify-between items-center mb-3">
                <h2 class="text-sm font-medium text-gray-400 flex items-center">
                    <i class="fa fa-volume-up mr-2"></i>音量控制
                </h2>
                <button class="text-gray-400 hover:text-light transition-colors" id="mute-button">
                    <i class="fa fa-volume-up"></i>
                </button>
            </div>
            
            <!-- 音量调节 -->
            <div>
                <div class="flex justify-between text-xs mb-1">
                    <span>音量</span>
                    <span id="volume-value">50%</span>
                </div>
                <input type="range" min="0" max="100" value="50" class="w-full" id="volume-slider">
            </div>
        </div>
        
        <!-- 底部状态信息 -->
        <div class="mt-auto pt-4 border-t border-gray-700 text-center text-xs text-gray-500">
            <p class="flex items-center justify-center">
                <span class="inline-block w-2 h-2 rounded-full bg-success status-indicator mr-1"></span>
                系统正常运行中
            </p>
            <p class="mt-1" id="current-time">--:--</p>
        </div>
    </div>

    <script>
        // 场景模式按钮交互
        const sceneButtons = document.querySelectorAll('.scene-button');
        
        sceneButtons.forEach(button => {
            button.addEventListener('click', () => {
                // 移除所有按钮的活跃状态
                sceneButtons.forEach(btn => btn.classList.remove('scene-button-active'));
                
                // 为当前点击的按钮添加活跃状态
                button.classList.add('scene-button-active');
                
                // 根据选择的场景自动调整设备状态
                const scene = button.getAttribute('data-scene');
                applySceneSettings(scene);
            });
        });
        
        // 应用场景设置
        function applySceneSettings(scene) {
            switch(scene) {
                case 'meeting':
                    // 会议场景：明亮灯光，适中音量，关闭氛围灯，标准温度
                    document.getElementById('brightness-slider').value = 90;
                    document.getElementById('brightness-value').textContent = '90%';
                    document.getElementById('temperature-slider').value = 5000;
                    document.getElementById('temperature-value').textContent = '5000K';
                    document.getElementById('volume-slider').value = 30;
                    document.getElementById('volume-value').textContent = '30%';
                    document.getElementById('ambient-toggle').checked = false;
                    document.getElementById('light-toggle').checked = true;
                    document.getElementById('ac-toggle').checked = true;
                    document.getElementById('temp-slider').value = 24;
                    document.getElementById('temp-value').textContent = '24°C';
                    document.getElementById('fan-speed-slider').value = 2;
                    document.getElementById('fan-speed-value').textContent = '2级';
                    updateVolumeIcon();
                    break;
                case 'reading':
                    // 阅读场景：中等亮度，低音量，低亮度蓝色氛围灯
                    document.getElementById('brightness-slider').value = 60;
                    document.getElementById('brightness-value').textContent = '60%';
                    document.getElementById('temperature-slider').value = 4500;
                    document.getElementById('temperature-value').textContent = '4500K';
                    document.getElementById('volume-slider').value = 20;
                    document.getElementById('volume-value').textContent = '20%';
                    document.getElementById('ambient-toggle').checked = true;
                    document.getElementById('ambient-brightness-slider').value = 30;
                    document.getElementById('ambient-brightness-value').textContent = '30%';
                    document.getElementById('ac-toggle').checked = true;
                    document.getElementById('temp-slider').value = 25;
                    document.getElementById('temp-value').textContent = '25°C';
                    document.getElementById('fan-speed-slider').value = 1;
                    document.getElementById('fan-speed-value').textContent = '1级';
                    selectColor('blue');
                    document.getElementById('light-toggle').checked = true;
                    updateVolumeIcon();
                    break;
                case 'rest':
                    // 休息场景：低亮度，静音，低亮度暖色氛围灯
                    document.getElementById('brightness-slider').value = 20;
                    document.getElementById('brightness-value').textContent = '20%';
                    document.getElementById('temperature-slider').value = 2700;
                    document.getElementById('temperature-value').textContent = '2700K';
                    document.getElementById('volume-slider').value = 0;
                    document.getElementById('volume-value').textContent = '0%';
                    document.getElementById('ambient-toggle').checked = true;
                    document.getElementById('ambient-brightness-slider').value = 20;
                    document.getElementById('ambient-brightness-value').textContent = '20%';
                    document.getElementById('ac-toggle').checked = true;
                    document.getElementById('temp-slider').value = 26;
                    document.getElementById('temp-value').textContent = '26°C';
                    document.getElementById('fan-speed-slider').value = 1;
                    document.getElementById('fan-speed-value').textContent = '1级';
                    selectColor('yellow');
                    document.getElementById('light-toggle').checked = true;
                    updateVolumeIcon();
                    break;
                case 'entertainment':
                    // 娱乐场景：适中亮度，较高音量，彩色氛围灯
                    document.getElementById('brightness-slider').value = 50;
                    document.getElementById('brightness-value').textContent = '50%';
                    document.getElementById('temperature-slider').value = 3500;
                    document.getElementById('temperature-value').textContent = '3500K';
                    document.getElementById('volume-slider').value = 70;
                    document.getElementById('volume-value').textContent = '70%';
                    document.getElementById('ambient-toggle').checked = true;
                    document.getElementById('ambient-brightness-slider').value = 80;
                    document.getElementById('ambient-brightness-value').textContent = '80%';
                    document.getElementById('ac-toggle').checked = true;
                    document.getElementById('temp-slider').value = 23;
                    document.getElementById('temp-value').textContent = '23°C';
                    document.getElementById('fan-speed-slider').value = 3;
                    document.getElementById('fan-speed-value').textContent = '3级';
                    selectColor('purple');
                    document.getElementById('light-toggle').checked = true;
                    updateVolumeIcon();
                    break;
            }
        }
        
        // 氛围灯颜色选择
        const colorOptions = document.querySelectorAll('.color-option');
        const colorGradient = document.querySelector('.color-gradient');
        const colorIndicator = document.querySelector('.color-picker-indicator');
        
        // 为每个预设颜色添加点击事件
        colorOptions.forEach(option => {
            option.addEventListener('click', () => {
                const color = option.getAttribute('data-color');
                selectColor(color);
            });
        });
        
        // 渐变色带交互
        colorGradient.addEventListener('click', (e) => {
            const rect = colorGradient.getBoundingClientRect();
            const position = ((e.clientX - rect.left) / rect.width) * 100;
            colorIndicator.style.left = `${position}%`;
            
            // 找到最接近的预设颜色
            let closestColor = null;
            let closestDistance = Infinity;
            
            colorOptions.forEach(option => {
                const optionPosition = parseFloat(option.getAttribute('data-position'));
                const distance = Math.abs(optionPosition - position);
                
                if (distance < closestDistance) {
                    closestDistance = distance;
                    closestColor = option.getAttribute('data-color');
                }
            });
            
            // 选中最接近的预设颜色
            selectColor(closestColor);
        });
        
        // 允许拖动滑块选择颜色
        let isDragging = false;
        
        colorIndicator.addEventListener('mousedown', (e) => {
            e.preventDefault();
            isDragging = true;
        });
        
        document.addEventListener('mousemove', (e) => {
            if (isDragging && ambientToggle.checked) {
                const rect = colorGradient.getBoundingClientRect();
                let position = ((e.clientX - rect.left) / rect.width) * 100;
                
                // 限制在0-100%范围内
                position = Math.max(0, Math.min(100, position));
                colorIndicator.style.left = `${position}%`;
                
                // 找到最接近的预设颜色
                let closestColor = null;
                let closestDistance = Infinity;
                
                colorOptions.forEach(option => {
                    const optionPosition = parseFloat(option.getAttribute('data-position'));
                    const distance = Math.abs(optionPosition - position);
                    
                    if (distance < closestDistance) {
                        closestDistance = distance;
                        closestColor = option.getAttribute('data-color');
                    }
                });
                
                // 选中最接近的预设颜色
                selectColor(closestColor);
            }
        });
        
        document.addEventListener('mouseup', () => {
            isDragging = false;
        });
        
        // 触摸设备支持
        colorGradient.addEventListener('touchstart', (e) => {
            e.preventDefault();
            handleTouch(e);
        });
        
        colorGradient.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (ambientToggle.checked) {
                handleTouch(e);
            }
        });
        
        function handleTouch(e) {
            const rect = colorGradient.getBoundingClientRect();
            const touch = e.touches[0];
            const position = ((touch.clientX - rect.left) / rect.width) * 100;
            
            // 限制在0-100%范围内
            const clampedPosition = Math.max(0, Math.min(100, position));
            colorIndicator.style.left = `${clampedPosition}%`;
            
            // 找到最接近的预设颜色
            let closestColor = null;
            let closestDistance = Infinity;
            
            colorOptions.forEach(option => {
                const optionPosition = parseFloat(option.getAttribute('data-position'));
                const distance = Math.abs(optionPosition - clampedPosition);
                
                if (distance < closestDistance) {
                    closestDistance = distance;
                    closestColor = option.getAttribute('data-color');
                }
            });
            
            // 选中最接近的预设颜色
            selectColor(closestColor);
        }
        
        // 选择颜色并更新UI
        function selectColor(color) {
            // 移除所有颜色选项的选中状态
            colorOptions.forEach(opt => opt.classList.remove('selected'));
            
            // 为选中的颜色添加选中状态
            const selectedOption = document.querySelector(`.color-option[data-color="${color}"]`);
            if (selectedOption) {
                selectedOption.classList.add('selected');
                
                // 更新滑块位置
                const position = selectedOption.getAttribute('data-position');
                colorIndicator.style.left = position;
            }
        }
        
        // 更新时间显示
        function updateTime() {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            document.getElementById('current-time').textContent = `${hours}:${minutes}`;
        }
        
        // 初始化时间并设置定时器
        updateTime();
        setInterval(updateTime, 60000);
        
        // 亮度滑块交互
        const brightnessSlider = document.getElementById('brightness-slider');
        const brightnessValue = document.getElementById('brightness-value');
        const lightToggle = document.getElementById('light-toggle');
        
        brightnessSlider.addEventListener('input', () => {
            brightnessValue.textContent = `${brightnessSlider.value}%`;
        });
        
        // 灯光开关控制
        lightToggle.addEventListener('change', () => {
            const sliders = document.querySelectorAll('#brightness-slider, #temperature-slider');
            sliders.forEach(slider => {
                slider.disabled = !lightToggle.checked;
                slider.style.opacity = lightToggle.checked ? '1' : '0.5';
            });
        });
        
        // 色温滑块交互
        const temperatureSlider = document.getElementById('temperature-slider');
        const temperatureValue = document.getElementById('temperature-value');
        
        temperatureSlider.addEventListener('input', () => {
            temperatureValue.textContent = `${temperatureSlider.value}K`;
        });
        
        // 空调温度控制
        const tempSlider = document.getElementById('temp-slider');
        const tempValue = document.getElementById('temp-value');
        const acToggle = document.getElementById('ac-toggle');
        
        tempSlider.addEventListener('input', () => {
            tempValue.textContent = `${tempSlider.value}°C`;
        });
        
        // 空调风力控制
        const fanSpeedSlider = document.getElementById('fan-speed-slider');
        const fanSpeedValue = document.getElementById('fan-speed-value');
        
        fanSpeedSlider.addEventListener('input', () => {
            fanSpeedValue.textContent = `${fanSpeedSlider.value}级`;
        });
        
        // 空调开关控制
        acToggle.addEventListener('change', () => {
            const acSliders = document.querySelectorAll('#temp-slider, #fan-speed-slider');
            acSliders.forEach(slider => {
                slider.disabled = !acToggle.checked;
                slider.style.opacity = acToggle.checked ? '1' : '0.5';
            });
        });
        
        // 氛围灯亮度控制
        const ambientBrightnessSlider = document.getElementById('ambient-brightness-slider');
        const ambientBrightnessValue = document.getElementById('ambient-brightness-value');
        const ambientToggle = document.getElementById('ambient-toggle');
        
        ambientBrightnessSlider.addEventListener('input', () => {
            ambientBrightnessValue.textContent = `${ambientBrightnessSlider.value}%`;
        });
        
        ambientToggle.addEventListener('change', () => {
            ambientBrightnessSlider.disabled = !ambientToggle.checked;
            ambientBrightnessSlider.style.opacity = ambientToggle.checked ? '1' : '0.5';
            
            // 禁用/启用颜色选择器
            colorOptions.forEach(option => {
                option.style.pointerEvents = ambientToggle.checked ? 'auto' : 'none';
                option.style.opacity = ambientToggle.checked ? '1' : '0.5';
            });
            
            // 禁用/启用渐变色带
            colorGradient.style.pointerEvents = ambientToggle.checked ? 'auto' : 'none';
            colorGradient.style.opacity = ambientToggle.checked ? '1' : '0.5';
        });
        
        // 音量滑块交互
        const volumeSlider = document.getElementById('volume-slider');
        const volumeValue = document.getElementById('volume-value');
        const muteButton = document.getElementById('mute-button');
        let lastVolume = 50;
        
        volumeSlider.addEventListener('input', () => {
            volumeValue.textContent = `${volumeSlider.value}%`;
            
            // 更新音量图标
            updateVolumeIcon();
        });
        
        // 更新音量图标
        function updateVolumeIcon() {
            if (volumeSlider.value == 0) {
                muteButton.innerHTML = '<i class="fa fa-volume-off"></i>';
            } else if (volumeSlider.value < 50) {
                muteButton.innerHTML = '<i class="fa fa-volume-down"></i>';
            } else {
                muteButton.innerHTML = '<i class="fa fa-volume-up"></i>';
            }
        }
        
        // 静音按钮交互
        muteButton.addEventListener('click', () => {
            if (volumeSlider.value > 0) {
                lastVolume = volumeSlider.value;
                volumeSlider.value = 0;
            } else {
                volumeSlider.value = lastVolume;
            }
            volumeValue.textContent = `${volumeSlider.value}%`;
            updateVolumeIcon();
        });
        
        // 电器开关状态变化效果
        const toggles = document.querySelectorAll('#ac-toggle');
        toggles.forEach(toggle => {
            toggle.addEventListener('change', function() {
                // 添加状态变化时的动画效果
                this.parentElement.classList.add('scale-105');
                setTimeout(() => {
                    this.parentElement.classList.remove('scale-105');
                }, 200);
            });
        });
    </script>
</body>
</html>
